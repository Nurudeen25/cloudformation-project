Parameters:
  RoleTempName:
    Description: Name of the base stack with all infra resources
    Type: String
    Default: cicds3role
  JenkStackName:
    Description: Name of the base stack with all infra resources
    Type: String
    Default: jenk
  MyIP:
    Type: String
  KeyName:
    Type: String
  InstanceType:
    Type: String
    Default: t2.small
Mappings:
  AmiRegionMap:
    us-east-1:
      AMI: ami-03cf1a25c0360a38
    us-east-2:
      AMI: ami-09c08b542a3df6eac
    us-west-1:
      AMI: ami-005d20c35ced4dc9e
    us-west-2:
      AMI: ami-0913c47048d853921
Resources:
  WintestInst:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap
        #        Fn::FindInMap:
        - AmiRegionMap
        - !Ref 'AWS::Region'
        - AMI
      Tags:
        - Key: "Name"
          Value: !Join
            - ""
            - - "Wintest in"
              - !Ref AWS::Region
      SecurityGroups:
        - !Ref wintestSG
      IamInstanceProfile:
        Fn::ImportValue:
          Fn::Sub: "${RoleTempName}-VPS3RoleProfileName"
      UserData:
        Fn::Base64:
          !Sub |
          <powershell>
          Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          choco install jdk8 -y 
          choco install maven -y 
          choco install googlechrome -y
          choco install git -y
          mkdir C:\jenkins
          </powershell>

  wintestSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: wintestSG
      GroupDescription: Allow SSH & HTTP from myip
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref MyIP
  wintestSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt wintestSG.GroupId
      IpProtocol: -1
      SourceSecurityGroupId:
        Fn::ImportValue:
          Fn::Sub: "${JenkStackName}-SGID"
  JenkinsSGIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId:
        Fn::ImportValue:
          Fn::Sub: "${JenkStackName}-SGID"
      IpProtocol: -1
      SourceSecurityGroupId:
        Fn::GetAtt:
          - wintestSG
          - GroupId